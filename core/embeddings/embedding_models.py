import os
import logging
from typing import Union, List, Dict, Any
import numpy as np
from sentence_transformers import SentenceTransformer

# Initialize logger
logger = logging.getLogger(__name__)

# Define the default embedding model name
MODEL_NAME = os.getenv("EMBEDDING_MODEL_NAME", "all-MiniLM-L6-v2")


class EmbeddingModelService:
    _model = None

    def __init__(self, model_name: str = MODEL_NAME):
        self.model_name = model_name
        if EmbeddingModelService._model is None or self.model_name != EmbeddingModelService._model.model_name_or_path:  # type: ignore
            try:
                logger.info(f"Loading sentence-transformer model: {self.model_name}")
                EmbeddingModelService._model = SentenceTransformer(self.model_name)
                logger.info(f"Sentence-transformer model '{self.model_name}' loaded successfully.")
            except Exception as e:
                logger.error(f"Failed to load sentence-transformer model '{self.model_name}': {e}", exc_info=True)
                raise RuntimeError(f"Could not initialize embedding model: {self.model_name}") from e

    @property
    def model(self) -> SentenceTransformer:
        """Returns the initialized embedding model."""
        if EmbeddingModelService._model is None:
            logger.error("Embedding model accessed before successful initialization!")
            raise RuntimeError("Embedding model not initialized. Check logs for initialization errors.")
        return EmbeddingModelService._model

    def get_embedding_dimension(self) -> int:
        """Returns the dimension of the embeddings generated by the model."""
        try:
            # Encode a dummy sentence to get the dimension
            dummy_embedding = self.model.encode("test")
            if isinstance(dummy_embedding, np.ndarray):
                return dummy_embedding.shape[0]
            else:
                logger.error("Could not determine embedding dimension, encode() did not return numpy array.")
                return 0  # Or raise error
        except Exception as e:
            logger.error(f"Error getting embedding dimension: {e}", exc_info=True)
            return 0  # Or raise error

    def generate_embeddings(self, texts: Union[str, List[str]], show_progress_bar: bool = False) -> List[List[float]]:
        """
        Generates embeddings for a single text or a list of texts.
        Always returns a list of embeddings (list of lists of floats).
        """
        if not texts:
            return []

        is_single_text = isinstance(texts, str)
        input_texts = [texts] if is_single_text else texts

        try:
            logger.debug(f"Generating embeddings for {len(input_texts)} text(s) using {self.model_name}...")
            embeddings_np: np.ndarray = self.model.encode(input_texts, show_progress_bar=show_progress_bar)
            embeddings_list: List[List[float]] = embeddings_np.tolist()
            logger.debug(f"Successfully generated {len(embeddings_list)} embeddings.")
            return embeddings_list
        except Exception as e:
            logger.error(f"Error generating embeddings: {e}", exc_info=True)
            return [[] for _ in input_texts]  # Return empty lists for failed embeddings
