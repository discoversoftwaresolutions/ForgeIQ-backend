# ===================================
# üìÅ pyproject.toml (Corrected V0.3)
# ===================================

[tool.black]
line-length = 88
target-version = ['py311'] # Match your Python version
# 'include' defaults to '\.pyi?$' which is usually fine.
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | \.pytest_cache
  # Add paths to compiled outputs of any non-Python code if relevant
  # For a pure Python project, these might be less critical but good to have:
  | apps/.*/dist
  | agents/.*/dist
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
# -ra: show extra test summary info for (s)skipped, (X)xfailed, (F)failed, (E)error, (P)passed
# -q: quiet mode, less verbose
# --strict-markers: ensure all @pytest.mark markers are registered
addopts = "-ra -q --color=yes --strict-markers"
testpaths = [
    "tests", # Main directory for tests (e.g., tests/unit, tests/integration)
    # You can also add paths if you co-locate tests with source code:
    # "apps",
    # "agents",
    # "core",
]
python_files = "test_*.py *_test.py tests_*.py" # Standard test file patterns
python_classes = "Test* Describe*" # For class-based tests or pytest-describe
python_functions = "test_*"        # For function-based tests

# Configure asyncio mode for pytest-asyncio (important for your async agents/services)
asyncio_mode = "auto"

# Configure PYTHONPATH for pytest to correctly find your project's modules
pythonpath = [
  ".",        # Adds the monorepo root to Python's path
  "apps",     
  "agents",   
  "core",     
  "interfaces",
  "plugins",  # If you have Python code in plugins
  "sdk",      
  "shared"    
]

# Configure logging display during pytest runs
log_cli = true # <<< CORRECTED TOML BOOLEAN (was True)
log_cli_level = "INFO" 
log_cli_format = "%(asctime)s [%(levelname)-8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Example for Ruff (optional, modern, fast linter/formatter - can replace black & flake8)
# [tool.ruff]
# line-length = 88
# select = ["E", "F", "W", "I001", "UP", "N", "C4", "B", "A", "RUF"] # Example rule set
# ignore = ["E501"] # Ignore line too long, as Black handles it
# target-version = "py311"
# src = ["."] 
# exclude = [
#     ".bzr", ".direnv", ".eggs", ".git", ".hg", ".mypy_cache", ".nox", ".pants.d",
#     ".ruff_cache", ".svn", ".tox", ".venv", "venv", "__pypackages__", "_build", "buck-out",
#     "build", "dist", "node_modules",
#     "*.md", 
# ]

# [tool.ruff.isort]
# known_first_party = ["apps", "agents", "core", "interfaces", "plugins", "sdk", "shared"]
